"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
const builder_1 = require("../classes/builder");
const utils_1 = require("../classes/utils");
exports.data = {
    data: new builder_1.FunctionBuilder()
        .setName('addEffect')
        .setValue('description', 'Add an effect to the canvas context.')
        .setValue('use', '$addEffect[name;howmany]')
        .setValue('returns', 'Void'),
    code: async (d) => {
        let r = d.unpack(d);
        if (!r.inside)
            return utils_1.Utils.Warn('Invalid inside provided in:', d.func);
        if (!d._.Canvas?.ctx)
            return utils_1.Utils.Warn('Not canvas found, create one first using $createCanvas, in:', d.func);
        let [name, read] = r.splits;
        if (!name || !read)
            return utils_1.Utils.Warn('Invalid fields provided.', d.func);
        if (!['blur', 'brightness', 'contrast', 'grayscale', 'invert', 'saturate', 'sepia'].some(t => t === name.unescape()))
            return utils_1.Utils.Warn('Invalid type provided in:', d.func);
        if (!utils_1.Utils.isNumber(read))
            return utils_1.Utils.Warn('Invalid number provided in:', d.func);
        d._.Canvas.ctx.filter = `${name.unescape()}(${read}${name.unescape() === 'blur' ? 'px' : '%'})`;
        return {
            code: d.code.resolve(`${d.func}[${r.inside}]`, '')
        };
    }
};
