"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
const tslib_1 = require("tslib");
const builder_1 = require("../classes/builder");
const utils_1 = require("../classes/utils");
const promises_1 = require("fs/promises");
const canvas_1 = tslib_1.__importDefault(require("@napi-rs/canvas"));
const axios_1 = tslib_1.__importDefault(require("axios"));
exports.data = {
    data: new builder_1.FunctionBuilder()
        .setName('loadImage')
        .setValue('description', 'Load a new image and save it as an ID.')
        .setValue('use', '$loadImage[id;type(path|url);body]')
        .setValue('returns', 'Void'),
    code: async (d) => {
        let r = d.unpack(d);
        if (!r.inside)
            return utils_1.Utils.Warn('Invalid inside provided in:', d.func);
        if (r.splits.length < 3)
            return utils_1.Utils.Warn('Invalid fields provided in:', d.func);
        let [id, type, body] = r.splits;
        if (!['path', 'url', 'link'].some(w => w === type.toLowerCase()))
            return utils_1.Utils.Warn('Invalid type provided in:', d.func);
        const img = new canvas_1.default.Image();
        let loaded = true;
        if (type.toLowerCase() === 'path') {
            const file = await (0, promises_1.readFile)(body).catch(e => null);
            if (!file)
                return utils_1.Utils.Warn('Invalid image path provided in:', d.func);
            img.src = file;
        }
        else if (type.toLowerCase() === 'url' || type.toLowerCase() === 'link') {
            const file = await axios_1.default.get(body.unescape().replace('.webp', '.png'), { responseType: 'arraybuffer' }).catch(e => null);
            const data = file ? (await file.data) : null;
            if (data) {
                img.src = data;
            }
            else {
                loaded = false;
            }
        }
        if (!d._.Images)
            d._.Images = {};
        d._.Images[id] = loaded ? img : null;
        return {
            code: d.code.resolve(`${d.func}[${r.inside}]`, '')
        };
    }
};
