"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
const builder_1 = require("../classes/builder");
const utils_1 = require("../classes/utils");
exports.data = {
    data: new builder_1.FunctionBuilder()
        .setName('drawRect')
        .setValue('description', 'Draws a rect in the canvas.')
        .setValue('use', '$drawRect[x;y;width;height;radius?]')
        .setValue('returns', 'Void'),
    code: async (d) => {
        let r = d.unpack(d);
        if (!r.inside)
            return utils_1.Utils.Warn('Invalid inside provided in:', d.func);
        if (r.splits.length < 4)
            return utils_1.Utils.Warn('Invalid fields provided in:', d.func);
        let [x, y, w, h, radius = '0'] = r.splits;
        if (!utils_1.Utils.isNumber(x) || !utils_1.Utils.isNumber(y) || !utils_1.Utils.isNumber(w) || !utils_1.Utils.isNumber(h) || !utils_1.Utils.isNumber(radius))
            return utils_1.Utils.Warn('Some numer is invalid in:', d.func);
        if (!d._.Canvas?.ctx)
            return utils_1.Utils.Warn('Not canvas found, create one first using $createCanvas, in:', d.func);
        d._.Canvas.ctx.save();
        utils_1.Utils.molde(d._.Canvas.ctx, Number(x), Number(y), Number(w), Number(h), parseInt(radius));
        d._.Canvas.ctx.clip();
        d._.Canvas.ctx.fillRect(Number(x), Number(y), Number(w), Number(h));
        d._.Canvas.ctx.restore();
        d._.Canvas.ctx.save();
        return {
            code: d.code.resolve(`${d.func}[${r.inside}]`, '')
        };
    }
};
