"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
const tslib_1 = require("tslib");
const builder_1 = require("../classes/builder");
const utils_1 = require("../classes/utils");
const axios_1 = tslib_1.__importDefault(require("axios"));
exports.data = {
    data: new builder_1.FunctionBuilder()
        .setName('request')
        .setValue('description', 'Make a http request.')
        .setValue('use', '$request[link;config?;...headers?]')
        .setValue('returns', 'Void'),
    code: async (d) => {
        let r = d.unpack(d);
        if (!r.inside)
            return utils_1.Utils.Warn('Invalid inside provided in:', d.func);
        let [link, config, ...headers] = r.splits;
        let obj = { url: link.unescape() };
        const resolved = utils_1.Utils.loadObject(config);
        if (config) {
            if (!resolved)
                return utils_1.Utils.Warn('Invalid JSON configuration provided in:', d.func);
            if (resolved.method)
                obj.method = resolved.method;
            if (resolved.data)
                obj.data = resolved.data;
        }
        if (headers.length) {
            if (!obj.headers)
                obj.headers = {};
            for (const header of headers) {
                let n = header?.split(':')?.[0];
                let v = header?.split(':')?.[1];
                if (!n || !v) {
                    utils_1.Utils.Warn('Invalid header provided in:', d.func);
                    continue;
                }
                else {
                    obj.headers[n] = v;
                }
            }
        }
        let b = await (0, axios_1.default)(obj).catch(e => {
            console.log(resolved, e);
            if (resolved?.logError) {
                console.log(e);
                return null;
            }
            else {
                return null;
            }
        });
        d._.request_data = b?.data;
        return {
            code: d.code.resolve(`${d.func}[${r.inside}]`, '')
        };
    }
};
