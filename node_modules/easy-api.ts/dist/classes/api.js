"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.API = void 0;
const tslib_1 = require("tslib");
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const express_1 = tslib_1.__importDefault(require("express"));
const routes_1 = require("./routes");
const interpreter_1 = require("./interpreter");
const utils_1 = require("./utils");
class API extends tiny_typed_emitter_1.TypedEmitter {
    port;
    db;
    app;
    routes;
    interpreter;
    constructor(options) {
        super();
        let db;
        if (options.database?.type?.toLowerCase() === 'mongo') {
            if (options.database?.enabled) {
                const { Database } = require('quickmongo');
                if (!options.database?.mongoUrl)
                    throw new Error('Invalid MONGO_URL provided in database options.');
                db = new Database(options.database.mongoUrl);
                db.connect();
            }
        }
        else if (options.database?.type?.toLowerCase() === 'replit') {
            if (options.database?.enabled) {
                const ReplitDb = require('@replit/database');
                db = new ReplitDb();
            }
        }
        else if (options.database?.type?.toLowerCase() === 'quickdb') {
            if (options.database?.enabled) {
                const { QuickDB } = require('quick.db');
                db = new QuickDB();
            }
        }
        else if (options.database?.type?.toLowerCase() === 'default' || !options.database?.type) {
            if (options.database?.enabled) {
                const { Database } = require('midb');
                db = new Database();
            }
        }
        if (options.spaces && isNaN(options.spaces) || options.spaces && (options.spaces >= 10 || 0 >= options.spaces))
            throw new SyntaxError('Invalid spaces number provided in constructor.');
        this.db = db;
        this.port = options.port;
        this.app = (0, express_1.default)();
        this.routes = new routes_1.Endpoints(this.app);
        this.interpreter = new interpreter_1.Interpreter(this.app, this.routes, this.db);
        this.app.set('json spaces', options.spaces || 1);
    }
    setSpaces(howm) {
        let n = Number(howm);
        if (isNaN(n) || 0 >= n || n >= 10)
            utils_1.Utils.Warn('Invalid spaces number provided in:', '<API>.setSpaces()');
        this.app.set('json spaces', n);
    }
    set404(code) {
        this.on('ready', () => {
            this.app.all('*', (req, res) => {
                this.interpreter.parse(code, req, res).catch(e => {
                    this.emit('error', e);
                });
            });
        });
    }
    connect() {
        let routes = this.routes.getRoutes();
        for (const route of routes) {
            this.app.get(route.path, (req, res) => {
                this.interpreter.parse(route.code, req, res).catch(e => {
                    this.emit('error', e);
                });
            });
        }
        this.app.listen(this.port, () => {
            this.emit('ready', this.app);
        });
    }
}
exports.API = API;
