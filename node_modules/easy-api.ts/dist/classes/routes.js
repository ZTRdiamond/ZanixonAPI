"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoints = void 0;
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = require("path");
const utils_1 = require("./utils");
const safe_1 = tslib_1.__importDefault(require("colors/safe"));
class Endpoints {
    app;
    routes;
    constructor(app) {
        this.app = app;
        this.routes = [];
    }
    getRoutes() {
        return this.routes;
    }
    add(route) {
        if (!route)
            throw new SyntaxError('Invalid route data provided.');
        if (!route.path || typeof route.path !== 'string')
            throw new SyntaxError('Invalid path route provided.');
        if (!route.code || typeof route.path !== 'string')
            throw new SyntaxError('Invalid call string provided.');
        if (route.details && typeof route.details !== 'object')
            throw new SyntaxError('Invalid extra object provided.');
        this.routes[this.routes.length] = route;
    }
    async loadWithCache(dir, arr) {
        let mdir = process.cwd();
        let modules = (0, fs_1.readdirSync)((0, path_1.join)(mdir, dir));
        for (const file of modules) {
            let stat = (0, fs_1.lstatSync)((0, path_1.join)(mdir, dir, file));
            if (stat.isDirectory()) {
                this.loadWithCache((0, path_1.join)(dir, file), arr);
                continue;
            }
            try {
                let route = require((0, path_1.join)(mdir, dir, file));
                route = !route?.path && route?.default?.path ? route.default : route;
                if (!route?.path || !route?.code) {
                    arr.push({ path: (0, path_1.join)(mdir, dir, file), loaded: safe_1.default.red('Failed'), route: route?.path });
                    continue;
                }
                this.add(route);
                arr.push({ path: (0, path_1.join)(mdir, dir, file), loaded: safe_1.default.green('Loaded'), route: route.path });
            }
            catch (e) {
                console.log(e);
                arr.push({ path: (0, path_1.join)(mdir, dir, file), loaded: safe_1.default.red('Failed') });
            }
        }
    }
    async load(dir) {
        if (!dir || typeof dir !== 'string')
            throw new SyntaxError('Invalid path provided.');
        let arr = [];
        let line = '| ----------------------------------------------------- |';
        this.loadWithCache(dir, arr).then(() => {
            arr = arr.map(i => `| ${safe_1.default.grey(i.path)}\n| ${i.loaded} [${safe_1.default.cyan(i.route || 'Unknown route')}]\n${line}`);
            console.log(line);
            for (const i of arr) {
                console.log(i);
            }
        }).catch((e) => {
            utils_1.Utils.Warn(`Failed to load path with reason: ${e}. at:`, `load(${dir})`);
        });
    }
}
exports.Endpoints = Endpoints;
